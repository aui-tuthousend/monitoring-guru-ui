/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as GuruImport } from './routes/guru'
import { Route as AboutImport } from './routes/about'
import { Route as IndexImport } from './routes/index'
import { Route as GuruIndexImport } from './routes/guru/index'
import { Route as AdminIndexImport } from './routes/admin/index'
import { Route as GuruScanImport } from './routes/guru/scan'
import { Route as AdminGuruImport } from './routes/admin/guru'
import { Route as AdminlayoutImport } from './routes/admin/__layout'

// Create Virtual Routes

const AdminImport = createFileRoute('/admin')()

// Create/Update Routes

const AdminRoute = AdminImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const GuruRoute = GuruImport.update({
  id: '/guru',
  path: '/guru',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const GuruIndexRoute = GuruIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => GuruRoute,
} as any)

const AdminIndexRoute = AdminIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AdminRoute,
} as any)

const GuruScanRoute = GuruScanImport.update({
  id: '/scan',
  path: '/scan',
  getParentRoute: () => GuruRoute,
} as any)

const AdminGuruRoute = AdminGuruImport.update({
  id: '/guru',
  path: '/guru',
  getParentRoute: () => AdminRoute,
} as any)

const AdminlayoutRoute = AdminlayoutImport.update({
  id: '/__layout',
  getParentRoute: () => AdminRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/guru': {
      id: '/guru'
      path: '/guru'
      fullPath: '/guru'
      preLoaderRoute: typeof GuruImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/admin': {
      id: '/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminImport
      parentRoute: typeof rootRoute
    }
    '/admin/__layout': {
      id: '/admin/__layout'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AdminlayoutImport
      parentRoute: typeof AdminRoute
    }
    '/admin/guru': {
      id: '/admin/guru'
      path: '/guru'
      fullPath: '/admin/guru'
      preLoaderRoute: typeof AdminGuruImport
      parentRoute: typeof AdminImport
    }
    '/guru/scan': {
      id: '/guru/scan'
      path: '/scan'
      fullPath: '/guru/scan'
      preLoaderRoute: typeof GuruScanImport
      parentRoute: typeof GuruImport
    }
    '/admin/': {
      id: '/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AdminIndexImport
      parentRoute: typeof AdminImport
    }
    '/guru/': {
      id: '/guru/'
      path: '/'
      fullPath: '/guru/'
      preLoaderRoute: typeof GuruIndexImport
      parentRoute: typeof GuruImport
    }
  }
}

// Create and export the route tree

interface GuruRouteChildren {
  GuruScanRoute: typeof GuruScanRoute
  GuruIndexRoute: typeof GuruIndexRoute
}

const GuruRouteChildren: GuruRouteChildren = {
  GuruScanRoute: GuruScanRoute,
  GuruIndexRoute: GuruIndexRoute,
}

const GuruRouteWithChildren = GuruRoute._addFileChildren(GuruRouteChildren)

interface AdminRouteChildren {
  AdminlayoutRoute: typeof AdminlayoutRoute
  AdminGuruRoute: typeof AdminGuruRoute
  AdminIndexRoute: typeof AdminIndexRoute
}

const AdminRouteChildren: AdminRouteChildren = {
  AdminlayoutRoute: AdminlayoutRoute,
  AdminGuruRoute: AdminGuruRoute,
  AdminIndexRoute: AdminIndexRoute,
}

const AdminRouteWithChildren = AdminRoute._addFileChildren(AdminRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/guru': typeof GuruRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof AdminlayoutRoute
  '/admin/guru': typeof AdminGuruRoute
  '/guru/scan': typeof GuruScanRoute
  '/admin/': typeof AdminIndexRoute
  '/guru/': typeof GuruIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/admin': typeof AdminIndexRoute
  '/admin/guru': typeof AdminGuruRoute
  '/guru/scan': typeof GuruScanRoute
  '/guru': typeof GuruIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/about': typeof AboutRoute
  '/guru': typeof GuruRouteWithChildren
  '/login': typeof LoginRoute
  '/admin': typeof AdminRouteWithChildren
  '/admin/__layout': typeof AdminlayoutRoute
  '/admin/guru': typeof AdminGuruRoute
  '/guru/scan': typeof GuruScanRoute
  '/admin/': typeof AdminIndexRoute
  '/guru/': typeof GuruIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/about'
    | '/guru'
    | '/login'
    | '/admin'
    | '/admin/guru'
    | '/guru/scan'
    | '/admin/'
    | '/guru/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/about'
    | '/login'
    | '/admin'
    | '/admin/guru'
    | '/guru/scan'
    | '/guru'
  id:
    | '__root__'
    | '/'
    | '/about'
    | '/guru'
    | '/login'
    | '/admin'
    | '/admin/__layout'
    | '/admin/guru'
    | '/guru/scan'
    | '/admin/'
    | '/guru/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AboutRoute: typeof AboutRoute
  GuruRoute: typeof GuruRouteWithChildren
  LoginRoute: typeof LoginRoute
  AdminRoute: typeof AdminRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AboutRoute: AboutRoute,
  GuruRoute: GuruRouteWithChildren,
  LoginRoute: LoginRoute,
  AdminRoute: AdminRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/about",
        "/guru",
        "/login",
        "/admin"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/guru": {
      "filePath": "guru.tsx",
      "children": [
        "/guru/scan",
        "/guru/"
      ]
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/admin": {
      "filePath": "admin",
      "children": [
        "/admin/__layout",
        "/admin/guru",
        "/admin/"
      ]
    },
    "/admin/__layout": {
      "filePath": "admin/__layout.tsx",
      "parent": "/admin"
    },
    "/admin/guru": {
      "filePath": "admin/guru.tsx",
      "parent": "/admin"
    },
    "/guru/scan": {
      "filePath": "guru/scan.tsx",
      "parent": "/guru"
    },
    "/admin/": {
      "filePath": "admin/index.tsx",
      "parent": "/admin"
    },
    "/guru/": {
      "filePath": "guru/index.tsx",
      "parent": "/guru"
    }
  }
}
ROUTE_MANIFEST_END */
