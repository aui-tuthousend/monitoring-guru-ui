/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AboutRouteImport } from './routes/about'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as IndexRouteImport } from './routes/index'
import { Route as AuthGuruRouteImport } from './routes/_auth/guru'
import { Route as AuthAdminRouteImport } from './routes/_auth/admin'
import { Route as AuthGuruIndexRouteImport } from './routes/_auth/guru/index'
import { Route as AuthAdminIndexRouteImport } from './routes/_auth/admin/index'
import { Route as AuthGuruScanRouteImport } from './routes/_auth/guru/scan'
import { Route as AuthAdminGuruRouteImport } from './routes/_auth/admin/guru'

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthGuruRoute = AuthGuruRouteImport.update({
  id: '/guru',
  path: '/guru',
  getParentRoute: () => AuthRoute,
} as any)
const AuthAdminRoute = AuthAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthRoute,
} as any)
const AuthGuruIndexRoute = AuthGuruIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthGuruRoute,
} as any)
const AuthAdminIndexRoute = AuthAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthAdminRoute,
} as any)
const AuthGuruScanRoute = AuthGuruScanRouteImport.update({
  id: '/scan',
  path: '/scan',
  getParentRoute: () => AuthGuruRoute,
} as any)
const AuthAdminGuruRoute = AuthAdminGuruRouteImport.update({
  id: '/guru',
  path: '/guru',
  getParentRoute: () => AuthAdminRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/admin': typeof AuthAdminRouteWithChildren
  '/guru': typeof AuthGuruRouteWithChildren
  '/admin/guru': typeof AuthAdminGuruRoute
  '/guru/scan': typeof AuthGuruScanRoute
  '/admin/': typeof AuthAdminIndexRoute
  '/guru/': typeof AuthGuruIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof AuthRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/admin/guru': typeof AuthAdminGuruRoute
  '/guru/scan': typeof AuthGuruScanRoute
  '/admin': typeof AuthAdminIndexRoute
  '/guru': typeof AuthGuruIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_auth': typeof AuthRouteWithChildren
  '/about': typeof AboutRoute
  '/login': typeof LoginRoute
  '/_auth/admin': typeof AuthAdminRouteWithChildren
  '/_auth/guru': typeof AuthGuruRouteWithChildren
  '/_auth/admin/guru': typeof AuthAdminGuruRoute
  '/_auth/guru/scan': typeof AuthGuruScanRoute
  '/_auth/admin/': typeof AuthAdminIndexRoute
  '/_auth/guru/': typeof AuthGuruIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/admin'
    | '/guru'
    | '/admin/guru'
    | '/guru/scan'
    | '/admin/'
    | '/guru/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/login'
    | '/admin/guru'
    | '/guru/scan'
    | '/admin'
    | '/guru'
  id:
    | '__root__'
    | '/'
    | '/_auth'
    | '/about'
    | '/login'
    | '/_auth/admin'
    | '/_auth/guru'
    | '/_auth/admin/guru'
    | '/_auth/guru/scan'
    | '/_auth/admin/'
    | '/_auth/guru/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthRoute: typeof AuthRouteWithChildren
  AboutRoute: typeof AboutRoute
  LoginRoute: typeof LoginRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/guru': {
      id: '/_auth/guru'
      path: '/guru'
      fullPath: '/guru'
      preLoaderRoute: typeof AuthGuruRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/admin': {
      id: '/_auth/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthAdminRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/guru/': {
      id: '/_auth/guru/'
      path: '/'
      fullPath: '/guru/'
      preLoaderRoute: typeof AuthGuruIndexRouteImport
      parentRoute: typeof AuthGuruRoute
    }
    '/_auth/admin/': {
      id: '/_auth/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AuthAdminIndexRouteImport
      parentRoute: typeof AuthAdminRoute
    }
    '/_auth/guru/scan': {
      id: '/_auth/guru/scan'
      path: '/scan'
      fullPath: '/guru/scan'
      preLoaderRoute: typeof AuthGuruScanRouteImport
      parentRoute: typeof AuthGuruRoute
    }
    '/_auth/admin/guru': {
      id: '/_auth/admin/guru'
      path: '/guru'
      fullPath: '/admin/guru'
      preLoaderRoute: typeof AuthAdminGuruRouteImport
      parentRoute: typeof AuthAdminRoute
    }
  }
}

interface AuthAdminRouteChildren {
  AuthAdminGuruRoute: typeof AuthAdminGuruRoute
  AuthAdminIndexRoute: typeof AuthAdminIndexRoute
}

const AuthAdminRouteChildren: AuthAdminRouteChildren = {
  AuthAdminGuruRoute: AuthAdminGuruRoute,
  AuthAdminIndexRoute: AuthAdminIndexRoute,
}

const AuthAdminRouteWithChildren = AuthAdminRoute._addFileChildren(
  AuthAdminRouteChildren,
)

interface AuthGuruRouteChildren {
  AuthGuruScanRoute: typeof AuthGuruScanRoute
  AuthGuruIndexRoute: typeof AuthGuruIndexRoute
}

const AuthGuruRouteChildren: AuthGuruRouteChildren = {
  AuthGuruScanRoute: AuthGuruScanRoute,
  AuthGuruIndexRoute: AuthGuruIndexRoute,
}

const AuthGuruRouteWithChildren = AuthGuruRoute._addFileChildren(
  AuthGuruRouteChildren,
)

interface AuthRouteChildren {
  AuthAdminRoute: typeof AuthAdminRouteWithChildren
  AuthGuruRoute: typeof AuthGuruRouteWithChildren
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthAdminRoute: AuthAdminRouteWithChildren,
  AuthGuruRoute: AuthGuruRouteWithChildren,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthRoute: AuthRouteWithChildren,
  AboutRoute: AboutRoute,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
